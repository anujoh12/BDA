import numpy as np 
import pandas as pd 
import re
import nltk 
import matplotlib.pyplot as plt

airline_tweets = pd.read_csv(r'D:\Msc.IT\BDA\Tweets.csv')
print(airline_tweets.head())

#plot_size = plt.rcParams["figure.figsize"] 
#print(plot_size[0]) 
#print(plot_size[1])

#plot_size[0] = 8
#plot_size[1] = 6
#plt.rcParams["figure.figsize"] = plot_size

print("**********")
pie_plt=airline_tweets.airline.value_counts()
print(pie_plt)
pie_plt.plot(kind='pie', autopct='%1.0f%%')
plt.show()

print("**********")
pie_plt2=airline_tweets.airline_sentiment.value_counts()
print(pie_plt2)
pie_plt2.plot(kind='pie', autopct='%1.0f%%', colors=["red", "yellow", "green"])
plt.show()

print("**********")
airline_sentiment = airline_tweets.groupby(['airline', 'airline_sentiment']).airline_sentiment.count().unstack()
print(airline_sentiment)
airline_sentiment.plot(kind='bar')
plt.show()

import seaborn as sns

sns.barplot(x='airline_sentiment', y='airline_sentiment_confidence' , data=airline_tweets)
plt.show()

features = airline_tweets.iloc[:, 10].values
print(features)
labels = airline_tweets.iloc[:, 1].values
print(labels)

processed_features = []

for sentence in range(0, len(features)):
    # Remove all the special characters
    processed_feature = re.sub(r'\W', ' ', str(features[sentence]))

    # remove all single characters
    processed_feature= re.sub(r'\s+[a-zA-Z]\s+', ' ', processed_feature)

    # Remove single characters from the start
    processed_feature = re.sub(r'\^[a-zA-Z]\s+', ' ', processed_feature) 

    # Substituting multiple spaces with single space
    processed_feature = re.sub(r'\s+', ' ', processed_feature, flags=re.I)

    # Removing prefixed 'b'
    processed_feature = re.sub(r'^b\s+', '', processed_feature)

    # Converting to Lowercase
    processed_feature = processed_feature.lower()

    processed_features.append(processed_feature)


from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer (max_features=2500, min_df=7, max_df=0.8, stop_words=stopwords.words('english'))
processed_features = vectorizer.fit_transform(processed_features).toarray()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(processed_features, labels, test_size=0.2, random_state=0)

from sklearn.ensemble import RandomForestClassifier

text_classifier = RandomForestClassifier(n_estimators=200, random_state=0)
text_classifier.fit(X_train, y_train)

predictions = text_classifier.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score

print(confusion_matrix(y_test,predictions))
print('accuracy score',accuracy_score(y_test, predictions))

print("***Exit**")
